//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework.Example
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    using QFramework;
    using StupidEditor;
    using System.Threading.Tasks;
    using System.Threading;
    using SimplePopup;

    public enum SequenceCommand
    {
        GenerateJson,
        TexturePackage,
        Zip,
    }

    public class ExportCommand
    {
        public List<ResourceInfo> TotalResInfo;
        public SequenceCommand command;
    }
    public class ExportCommandDone
    {
        public bool Ret;
        public string Reason;
    }

    public class UIPanelData : QFramework.UIPanelData
    {
    }

    public partial class UIPanel : QFramework.UIPanel
    {

        public GameObject ResourceItem;
        public Transform ScrollViewContent;
        public Transform Inspector;
        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException();
        }

        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIPanelData ?? new UIPanelData();
            // please add init code here
            TypeEventRegister();
        }

        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }

        protected override void OnShow()
        {
        }

        protected override void OnHide()
        {
        }

        protected override void OnClose()
        {
        }
        private void TypeEventRegister()
        {
            TypeEventSystem.Register<FileInfo>((fileInfo) =>
            {
                if (fileInfo.DropType == DragDropType.Add)
                {
                    var Item = Instantiate(ResourceItem, ScrollViewContent);
                    Item.GetComponent<ResourceItem>().SetItemInfo(fileInfo);
                    Item.GetComponent<Toggle>().group = ScrollViewContent.GetComponent<ToggleGroup>(); 
                }
                else
                {
                    var inspector = Inspector.GetComponent<Inspector>();
                    if (!inspector.Mask.activeSelf)
                    {
                        ///替换item
                        var item = inspector.SelectItem;
                        if (item)
                        {
                            var fileName = fileInfo.FileName;
                            var resItem = item.GetComponent<ResourceItem>();
                            fileInfo.FileName = fileName;
                            resItem.SetItemInfo(fileInfo);
                            SimplePopupManager.Instance.CreatePopup(string.Format("确定替换 {0}{1}", inspector.InputName.text, inspector.ExtensionText.text));
                            SimplePopupManager.Instance.AddButton("嗯嗯", delegate {
 
                                resItem.SetFileName(fileName);
                            });
                            SimplePopupManager.Instance.AddButton("算了算了", delegate { });
                            SimplePopupManager.Instance.ShowPopup();
                        }

                    }
                    else
                    {
                        SimplePopupManager.Instance.CreatePopup("没有选中的资源，无法进行替换");
                        SimplePopupManager.Instance.AddButton("朕晓得了", delegate {  });
                        SimplePopupManager.Instance.ShowPopup();
                    }
                }


            });
        }

        public async void Export()
        {
            Debug.Log("导出");
            List<ResourceInfo> TotalInfo = new List<ResourceInfo>();
            foreach (Transform child in ScrollViewContent)
            {
                var info = child.GetComponent<ResourceItem>().ResInfo;
                TotalInfo.Add(info);
            }
            ExportCommandDone result = null;
            result = await Task.Run(() => exec(TotalInfo, SequenceCommand.TexturePackage));
            if(result.Ret == false)
            {
                ShowErrorTips(result.Reason);
                return;
            }
            result = await Task.Run(() => exec(TotalInfo, SequenceCommand.GenerateJson));
            if (result.Ret == false)
            {
                ShowErrorTips(result.Reason);
            }

        }
        ExportCommandDone exec(List<ResourceInfo> totalInfo, SequenceCommand command)
        {
            ExportCommandDone res = null;
            TypeEventSystem.Register<ExportCommandDone>((done) => {
                res = done;
            });
            TypeEventSystem.Send(new ExportCommand()
            {
                TotalResInfo = totalInfo,
                command = command
            });
            return res;
        }
        void ShowErrorTips(string reason)
        {
            SimplePopupManager.Instance.CreatePopup(reason);
            SimplePopupManager.Instance.AddButton("朕知道,退下吧", delegate { Debug.Log("clicked on yes"); });
            SimplePopupManager.Instance.ShowPopup();
        }
    }
}